<MainLoading IsLoading=@DataServices.IsBusy LoadingText="@DataServices.LoadingText">
    @if (BuildingFile != null)
    {

        <EditForm Model="this">
            <label>Type</label>
            <InputSelect class="form-control" @bind-Value="BuildingFile.Type">
                @foreach (FileTypeEnum item in typeof(FileTypeEnum).GetEnumValues())
                {
                    <option value="@item">@item.GetLocalizedName()</option>
                }
            </InputSelect>
        </EditForm>
    }
    <div class="DropArea" style="margin:20px">
        @*  @DropString*@
        <InputFile id="inputDrop" OnChange="OnInputFileChange" /> @*@ondragenter="HandleDragEnter" @ondragleave="HandleDragLeave"*@
    </div>
    @if (File != null)
    {
        <div class="box-primary">
            <h3 class="text-center">@File.FileName</h3>
            <h4 class="text-center">@File.MemeType</h4>
            <div class="d-flex justify-content-center mt-2">
                <button class="btn btn-primary" @onclick=Validate>
                    <span class="oi oi-cloud-upload"></span>
                </button>
            </div>
        </div>
    }
</MainLoading>
@code {
    protected class TempFile
    {
        public string MemeType;
        public string FileName;
        public byte[] Content;
    }
    protected TempFile File;
    [Parameter] public AssetFile? BuildingFile { get; set; }
    protected async Task Validate()
    {
        var Id = await FileManager.SaveFile(File.Content);
        if (!string.IsNullOrEmpty(Id))
        {

            Dialog.Close(new HostedFile { FileName = File.FileName, ContentType = File.MemeType, ProviderID = Id });
        }
    }
    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        DataServices.SetBusy(GlobalLoc["Loading"]);
        try
        {
            byte[] Bytes;
            File = new TempFile();
            using (var stream = e.File.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10))
            using (var m = new MemoryStream())
            {
                await stream.CopyToAsync(m);
                File.Content = m.ToArray();
                File.MemeType = e.File.ContentType;
                File.FileName = e.File.Name;
            }


        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("exceeds the maximum"))
            {
                Notify.Notify(NotificationSeverity.Error, $"Fichier trop gros 4Mo maximum !");
            }
            else
            {
                Notify.Notify(NotificationSeverity.Error, $"Erreur inconnue ! " + ex.Message);
            }
        }
        DataServices.EndBusy();
        // IsBusy = false;
    }
}
