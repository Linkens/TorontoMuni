@page "/Buildings"

@inject IStringLocalizer<BuildingList> Localizer
<PageTitle>@Localizer["Building list"]</PageTitle>
<MainLoading IsLoading=@DataServices.IsBusy LoadingText="@DataServices.LoadingText">
    <table style="width:100%">
        <tr>
            <th>@Localizer["Building"]</th>
            <th>Type</th>
            <th>Structure</th>
            <th>@Localizer["Detail"]</th>
        </tr>
        @foreach (var item in Buildings)
        {
            <tr>
                <td>@item.Category</td>
                <td>@item.Structure</td>
                <td>@item.Denomination</td>
                <td>
                    <button class="Ghost" @onclick="()=>Detail(item)">
                        <span class="oi oi-cog"></span>
                    </button>
                </td>
            </tr>
        }

    </table>
    <div class="d-flex justify-content-end">
        <button class="btn btn-primary" @onclick="AddBat">
            <span class=" oi oi-plus"></span>
        </button>
    </div>
</MainLoading>
@code {
    protected List<ChoiceList> Denominations;
    protected List<Building> Buildings;
    protected override async Task OnInitializedAsync()
    {
        DataServices.SetBusy(GlobalLoc["Loading"]);
        Buildings = await Context.Buildings.ToListAsync();
        Denominations = await Context.Choices.Where(c => c.Filter == ChoiceListEnum.Denomination).ToListAsync();
        await Task.Delay(500);
        await base.OnInitializedAsync();
        DataServices.EndBusy();
    }
    protected async Task Detail(Building Bat)
    {
        await Context.Entry(Bat).Collection(b => b.Images).LoadAsync();
        await Dialog.OpenAsync<BuildingDetail>(GlobalLoc["Building general data"],
        new Dictionary<string, object> { { "Building", Bat }, { "Denominations", Denominations.Select(d => new EntityLocalizer<ChoiceList>(d)).ToList() }, { "c", Context } }, new DialogOptions { Width = "90%", ShowTitle = true });
    }
    protected async Task AddBat()
    {
        var Bat = new Building { Denomination = "Nouvelle" };
        var Return = await Dialog.OpenAsync<BuildingDetail>(GlobalLoc["Building general data"], new Dictionary<string, object> { { "Building", Bat }, { "Denominations", Denominations }, { "c", Context } }, new DialogOptions { Width = "90%", ShowTitle = true });

        if (Return != null && (bool)Return)
        {
            Context.Add(Bat);
            Buildings.Add(Bat);
            DataServices.SetBusy(GlobalLoc["Loading"]);
            StateHasChanged();
            await Task.Delay(500);
            await Context.SaveChangesAsync();
            DataServices.EndBusy();
            StateHasChanged();
        }

    }
}
