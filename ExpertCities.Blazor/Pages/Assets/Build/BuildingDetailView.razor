@page "/Assets/Building/{ID}/{Mode}"
@page "/Assets/Building/{ID}"
@inject IStringLocalizer<BuildingDetailView> Loc
@using ExpertCities.Blazor.Pages.Assets.Inventory
@using OxyPlot.Axes
@using OxyPlot.Blazor
@using OxyPlot
@using ExpertCities.Blazor.Pages.Assets.Build.Inspections
@using ExpertCities.Blazor.Pages.Assets.Build.Work
<MainLoading IsLoading=@DataServices.IsBusy LoadingText="@DataServices.LoadingText">
    <ul class="nav nav-pills">
        @foreach (var tab in TabItems)
        {
            var c = "nav-link";
            var aria = "";
            var Ref = $"/Assets/Building/{ID}/{tab.Value}";
            if (Mode == tab.Value)
            {
                c += " active";
                aria = "page";
            }
            <li class="nav-item">
                <a class="@c" aria-current="@aria" href="@Ref">@tab.Display</a>
            </li>
        }
    </ul>
    @if (Building != null)
    {
        @if (Mode == "Informations")
        {
            <BuildingDashBoard Building=Building></BuildingDashBoard>
            <h1 class="text-center">@GlobalLoc["Building general data"]</h1>
            <BuildingDetail Building="Building" c="Context" Denominations="List"></BuildingDetail>
        }
        else if (Mode == "Inventory")
        {
            <h1 class="text-center">@Loc["Inventory"]</h1>
            <InventoryListView Building="Building" c="Context"></InventoryListView>

        }
        else if (Mode == "Works")
        {
            <h1 class="text-center">@Loc["Works"]</h1>
            <WorkListView Building=Building c="Context"></WorkListView>

        }
        else if (Mode == "Inspections")
        {
            <h1 class="text-center">@Loc["Inspections"]</h1>
            <BuildingInspectionView Building=Building c="Context"></BuildingInspectionView>

        }
    }
    else
    {
        <h2 class="text-center">@Loc["No building with this identifier"]</h2>
    }
</MainLoading>
@code {
    [Parameter] public string Mode { get; set; }
    [Parameter] public string ID { get; set; }
    [Parameter] public Asset? Building { get; set; }
    [Parameter] public List<EntityLocalizer<ChoiceList>> List { get; set; }

    protected List<TabItem> TabItems;
    protected record TabItem(string Display, string Value);

    protected override async Task OnInitializedAsync()
    {
        DataServices.SetBusy(GlobalLoc["Loading ..."]);
        TabItems = new List<TabItem>() { new TabItem("Informations", "Informations"), new TabItem(Loc["Inventory"], "Inventory"), new TabItem(Loc["Inspections"], "Inspections"), new TabItem(Loc["Works"], "Works"), new TabItem(Loc["Life Cycle"], "LifeCycle"), };
        if (int.TryParse(ID, out int Value))
        {
            Building = await Context.Buildings.Include(b => b.Inspections)
            .Include(b => b.Images).Include(b => b.Files).Include(w => w.Works).ThenInclude(w => w.Actions).FirstOrDefaultAsync(b => b.ID == Value && b.Type == AssetTypeEnum.Building);
            if (Building != null)
            {
                var l = await Context.Choices.Where(c => c.Filter == ChoiceListEnum.Denomination).ToListAsync();
                List = l.Select(v => new EntityLocalizer<ChoiceList>(v)).ToList();
            }
        }
        if (Mode == null) Mode = "Informations";
        await base.OnInitializedAsync();
        DataServices.EndBusy();
    }
}
