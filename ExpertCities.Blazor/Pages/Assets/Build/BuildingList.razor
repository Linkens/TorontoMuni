@page "/Assets/Buildings"
@inject SecretServices Secrets;
@inject IStringLocalizer<BuildingList> Localizer
@inject IStringLocalizer<BuildingDetailView> LocBuilding
<PageTitle>@Localizer["Building list"]</PageTitle>
<MainLoading IsLoading=@DataServices.IsBusy LoadingText="@DataServices.LoadingText">
    <div id='map' style='width: 100%; height:30rem;'></div>
    <table class="mt-4" style="width:100%">
        <tr>
            <th>@Localizer["Building"]</th>
            <th>Type</th>
            <th>Structure</th>
            <th>@Localizer["Detail"]</th>
        </tr>
        @foreach (var item in Buildings)
        {
            <tr>
                <td>@item.Denomination</td>
                <td>@item.Category.GetLocalizeName()</td>
                <td>@item.Structure.GetLocalizeName()</td>
                <td>
                    <a class="Ghost" href="/Assets/Building/@item.ID">
                        <span class="oi oi-cog"></span>
                    </a>
                </td>
            </tr>
        }

    </table>
    <div class="d-flex justify-content-end mt-1">
        <button class="btn btn-primary" @onclick="AddBat">
            <span class=" oi oi-plus"></span>
        </button>
    </div>
</MainLoading>
@code {
    protected List<ChoiceList> Denominations;
    protected List<Asset> Buildings;
    protected override async Task OnInitializedAsync()
    {
        DataServices.SetBusy(GlobalLoc["Loading ..."]);
        Buildings = await Context.Buildings.ToListAsync();
        Denominations = await Context.Choices.Where(c => c.Filter == ChoiceListEnum.Denomination).ToListAsync();
        await Task.Delay(500);
        await base.OnInitializedAsync();
        DataServices.EndBusy();
        StateHasChanged();
        await JS.MapBox_SignIn(Secrets.Configuration["MapboxToken"], new float[] { -74.605f, 45.606f },13.5f);
        await JS.AddLocation(Buildings, Nav.BaseUri, LocBuilding);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //{
        //    await JS.MapBox_SignIn(Secrets.Configuration["MapboxToken"], new float[] { -74.605f, 45.606f });
        //    await JS.InvokeVoidAsync("AddLocation", $"{Nav.BaseUri}Assets/Building/1");
        //}
        await base.OnAfterRenderAsync(firstRender);
    }
    protected async Task Detail(Asset Bat)
    {
        await Context.Entry(Bat).Collection(b => b.Images).LoadAsync();
        await Context.Entry(Bat).Collection(b => b.Files).Query().Include(f => f.File).LoadAsync();
        await Dialog.OpenAsync<BuildingDetail>(GlobalLoc["Building general data"],
        new Dictionary<string, object> { { "Building", Bat }, { "Denominations", Denominations.Select(d => new EntityLocalizer<ChoiceList>(d)).ToList() }, { "c", Context } }, new DialogOptions { Width = "90%", ShowTitle = true });
    }
    protected async Task AddBat()
    {
        var Bat = new Asset { Denomination = Localizer["New"] };
        Bat.Files = new List<BuildingFile>();
        var Return = await Dialog.OpenAsync<BuildingDetail>(GlobalLoc["Building general data"],
        new Dictionary<string, object> { { "Building", Bat }, { "Denominations", Denominations.Select(d => new EntityLocalizer<ChoiceList>(d)).ToList() }, { "c", Context } }, new DialogOptions { Width = "90%", ShowTitle = true });

        if (Return != null && (bool)Return)
        {
            Context.Add(Bat);
            Buildings.Add(Bat);
            DataServices.SetBusy(GlobalLoc["Loading ..."]);
            StateHasChanged();
            await Task.Delay(500);
            await Context.SaveChangesAsync();
            DataServices.EndBusy();
            StateHasChanged();
        }

    }
}
