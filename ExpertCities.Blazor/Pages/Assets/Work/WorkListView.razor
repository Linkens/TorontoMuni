@page "/Assets/Works"
@inject IStringLocalizer<WorkListView> Loc
<MainLoading IsLoading=@DataServices.IsBusy LoadingText="@DataServices.LoadingText">
    <table style="width:100%">
        <tr>
            <th>@Loc["Building"]</th>
            <th>@Loc["Status"]</th>
            <th>@Loc["Internal"]</th>
            <th>@Loc["Actions"]</th>
            <th>@Loc["Detail"]</th>
        </tr>
        @foreach (var item in Works)
        {
            <tr>
                <td>@item.BuildingName</td>
                <td><WorkStateVisual Work="@item.Work"></WorkStateVisual></td>
                <td>@if(item.Work.IsInternal)
                    {
                        <span class="oi oi-check" style="color:green"></span>
                    }
                </td>
                <td>@item.Actions</td>
                <td><a target="_blank" href="/Assets/Work/@item.Work.ID"><span class="oi oi-action-redo"></span></a></td>
            </tr>
        }
    </table>
</MainLoading>
@code {
    protected class WorkBuild
    {
        public Work Work;
        public string? BuildingName;
        public int Actions;
    }
    protected List<WorkBuild> Works;
    protected override async Task OnInitializedAsync()
    {
        DataServices.SetBusy(GlobalLoc["Loading ..."]);
        Works = await Context.Works.Where(w => w.WorkOrderDate == null || w.WorkOrderDate < DateTime.Now.AddMonths(6))
            .Select(w => new WorkBuild { Work = w, BuildingName = w.Building.Denomination, Actions = w.Actions.Count }).ToListAsync();
        await base.OnInitializedAsync();
        DataServices.EndBusy();
    }
}
